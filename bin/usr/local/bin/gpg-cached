#!/bin/env python

import re
import subprocess
import logging

import click


log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
handler = logging.StreamHandler()
log.addHandler(handler)


def shell(cmd):
    p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)

    return_code = p.wait()
    if return_code != 0:
        log.warning(f"{rc}")

    err = p.stderr.read().decode() if p.stderr else None
    if err:
        log.error(f"{err}")
        return None

    output = p.stdout.read().decode() if p.stdout else None
    return output


def keygrips(key_id):
    cmd = ["gpg", "--fingerprint", "--with-keygrip", "--keyid-format=SHORT", key_id]
    if not (output := shell(cmd)):
        return None

    parts = [p for p in re.split(r"\n\n", output) if p]
    for p in parts:
        keys = [k for k in re.split(r"sub", p) if k]
        for k in keys:
            if sid := re.search(r"[a-z0-9]+/([A-Z0-9]+)", k):
                sid = sid.group(1)

            if not key_id == sid:
                continue

            if cap := re.search(r"\[(A|S|E|C)+\]", k):
                cap = cap.group(0)

            if grip := re.search(r"Keygrip = [0-9A-Fa-f]+", k):
                grip = grip.group(0)
                grip = grip.replace(r"Keygrip = ", "")

            if cap and grip:
                yield cap, grip


def subkeys(keyid):
    cmd = ["gpg", "--list-keys", "--keyid-format=SHORT", keyid]
    if output := shell(cmd):
        return re.findall(r"sub +.*/(.*?) ", output)


def is_cached(grip):
    cmd = ["gpg-connect-agent", f"KEYINFO --no-ask {grip} Err Pmt Des", "/bye"]
    if output := shell(cmd):
        return len(output) > 57 and output[57] == "1"


def cached_parts(key):
    cached = []

    log.debug(f"key: {key}")
    for sk in subkeys(key):
        log.debug(f" subkey: {sk}")
        for cap, grip in keygrips(sk):
            log.debug(f"  {cap=} {grip=:10} {is_cached(grip)=}")
            if is_cached(grip):
                cached.append(f"{cap}{sk}")

    return cached


CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])
@click.command(context_settings=CONTEXT_SETTINGS)
@click.argument("key", type=str)
@click.option("-v", "--verbose", is_flag=True)
def entry(key, verbose):
    cached = []

    if verbose:
        log.setLevel(logging.DEBUG)

    if cached := cached_parts(key):
        print(*cached)


if __name__ == "__main__":
    entry()
